#define TESTAPP_GEN

/******************************************************************************
*
* Copyright (C) 2002 - 2015 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/
/******************************************************************************/
/**
*
* @file xuartlite_intr_tapp_example.c
*
* This file contains a design example using the UartLite driver and
* hardware device using the interrupt mode for transmission of data.
*
* @note
*
* None.
*
* <pre>
* MODIFICATION HISTORY:
*
* Ver   Who  Date	 Changes
* ----- ---- -------- -----------------------------------------------
* 1.00b sv   06/08/06 Created for supporting Test App Interrupt examples
* 2.00a ktn  10/20/09 Updated to use HAL Processor APIs and minor changes
*		      for coding guidelnes.
* 2.01a ssb  01/11/01 Updated the example to be used with the SCUGIC in
*		      Zynq.
* 3.2   ms   01/23/17 Added xil_printf statement in main function to
*                     ensure that "Successfully ran" and "Failed" strings
*                     are available in all examples. This is a fix for
*                     CR-965028.
* </pre>
******************************************************************************/

/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xstatus.h"
#include "xintc.h"
#include "xil_exception.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define INTC_DEVICE_ID				XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_INT_ID	  		XPAR_INTC_0_IP_AXI_PWM_0_VEC_ID

/*
 * The following constant controls the length of the buffers to be sent
 * and received with the UartLite device.
 */

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

int PWMIntr(XIntc *IntcInstancePtr);
void PWMInterruptHandler(void *CallbackRef);
u32 GetBrightness();

//static void UartLiteSendHandler(void *CallBackRef, unsigned int EventData);
//
//static void UartLiteRecvHandler(void *CallBackRef, unsigned int EventData);
//
//int TestCheckTotalRecvCount();
//void ResetTotalRecvCount();
//int* GetData(XUartLite *UartLiteInstPtr);
//void SendData(XUartLite *UartLiteInstPtr, u8 *Send);
//int* GetRecvBuffer();
//int GetByte(int number);
//int* PrepareDataToSend(int mode, int reg);
//int* PrepareDataToSendTest();
//void GetUARTValue();

static int PWMSetupIntrSystem(XIntc *IntcInstancePtr);

/************************** Variable Definitions *****************************/

/*
 * The instances to support the device drivers are global such that they
 * are initialized to zero each time the program runs.
 */
#ifndef TESTAPP_GEN
static INTC IntcInstance;	/* The instance of the Interrupt Controller */
static XUartLite UartLiteInst;  /* The instance of the UartLite Device */
#endif

/*
 * The following variables are shared between non-interrupt processing and
 * interrupt processing such that they must be global.
 */

/*
 * The following buffer is used in this example to send data  with the UartLite.
 */

/*
 * The following counter is used to determine when the entire buffer has
 * been sent.
 */

volatile static u32 brightness = 101;

/****************************************************************************/
/**
*
* This function does a minimal test on the UartLite device and driver as a
* design example. The purpose of this function is to illustrate how to use
* the XUartLite component.
*
* This function sends data through the UartLite.
*
* This function uses the interrupt driver mode of the UartLite.  The calls to
* the  UartLite driver in the interrupt handlers, should only use the
* non-blocking calls.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
* @param	UartLiteDeviceId is the Device ID of the UartLite Device and
*		is the XPAR_<UARTLITE_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
* This function contains an infinite loop such that if interrupts are not
* working it may never return.
*
****************************************************************************/
int PWMIntr(XIntc *IntcInstancePtr)

{
	int Status;

	Status = PWMSetupIntrSystem(IntcInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Setup the handlers for the UartLite that will be called from the
	 * interrupt context when data has been sent and received,
	 * specify a pointer to the UartLite driver instance as the callback
	 * reference so the handlers are able to access the instance data.
	 */

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function is the handler which performs processing to send data to the
* UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized. It is called when the transmit
* FIFO of the UartLite is empty and more data can be sent through the UartLite.
*
* This handler provides an example of how to handle data for the UartLite, but
* is application specific.
*
* @param	CallBackRef contains a callback reference from the driver.
*		In this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void PWMInterrupt(void)
{
	brightness++;
}

u32 GetBrightness(){
	return brightness;
}

/****************************************************************************/
/**
*
* This function setups the interrupt system such that interrupts can occur
* for the UartLite. This function is application specific since the actual
* system may or may not have an interrupt controller. The UartLite could be
* directly connected to a processor without an interrupt controller. The
* user should modify this function to fit the application.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
*		XPAR_<UARTLITE_instance>_DEVICE_ID value from xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID
*		value from xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int PWMSetupIntrSystem(XIntc *IntcInstancePtr)
{
	int Status;

//#ifdef XPAR_INTC_0_DEVICE_ID

//#ifndef TESTAPP_GEN
//	/*
//	 * Initialize the interrupt controller driver so that it is ready
//	 * to use.
//	 */
	Status = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
//#endif

	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the specific
	 * interrupt processing for the device.
	 */
	Status = XIntc_Connect(IntcInstancePtr, INTC_DEVICE_INT_ID,
			(XInterruptHandler)PWMInterrupt,
			(void *)0);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

//#ifndef TESTAPP_GEN
//	/*
//	 * Start the interrupt controller such that interrupts are enabled for
//	 * all devices that cause interrupts, specific real mode so that
//	 * the UART can cause interrupts thru the interrupt controller.
//	 */
	Status = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
//#endif

	/*
	 * Enable the interrupt for the UartLite.
	 */
	XIntc_Enable(IntcInstancePtr, INTC_DEVICE_INT_ID);
//#else

//#ifndef TESTAPP_GEN
//	XScuGic_Config *IntcConfig;
//
//	/*
//	 * Initialize the interrupt controller driver so that it is ready to
//	 * use.
//	 */
//	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
//	if (NULL == IntcConfig) {
//		return XST_FAILURE;
//	}
//
//	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
//					IntcConfig->CpuBaseAddress);
//	if (Status != XST_SUCCESS) {
//		return XST_FAILURE;
//	}
//#endif /* TESTAPP_GEN */
//
//	XScuGic_SetPriorityTriggerType(IntcInstancePtr, UartLiteIntrId,
//					0xA0, 0x3);
//
//	/*
//	 * Connect the interrupt handler that will be called when an
//	 * interrupt occurs for the device.
//	 */
//	Status = XScuGic_Connect(IntcInstancePtr, UartLiteIntrId,
//				 (Xil_ExceptionHandler)XUartLite_InterruptHandler,
//				 UartLiteInstPtr);
//	if (Status != XST_SUCCESS) {
//		return Status;
//	}
//
//	/*
//	 * Enable the interrupt for the Timer device.
//	 */
//	XScuGic_Enable(IntcInstancePtr, UartLiteIntrId);
//#endif /* XPAR_INTC_0_DEVICE_ID */



//#ifndef TESTAPP_GEN
//
//	/*
//	 * Initialize the exception table.
//	 */
//	Xil_ExceptionInit();
//
//	/*
//	 * Register the interrupt controller handler with the exception table.
//	 */
//	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
//			(Xil_ExceptionHandler)INTC_HANDLER,
//			IntcInstancePtr);
//
//	/*
//	 * Enable exceptions.
//	 */
//	Xil_ExceptionEnable();
//
//#endif /* TESTAPP_GEN */

	return XST_SUCCESS;
}

